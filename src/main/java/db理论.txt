MYSQL数据库存储引擎：MERGE（merge存储引擎是一组MyISAM表的组合）、Innodb（事务安全表）、Memory（非事务安全表）、MyISAM（非事务安全表，也不支持外键，尤其
是访问速度快)。

MYSQL查看执行计划：explain .......

ACID:指的是原子性、一致性、隔离性和持久性.

数据库范式：（1）数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项；
                       （2）非码属性必须完全依赖于候选码；所谓完全依赖是指不能存在仅依赖主关键字一部分的属性；
                       （3）任何非主属性不依赖于其它非主属性；此举消除了传递性依赖。

 脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据；
 不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值；
 幻读是事务非独立执行时发生的一种现象。例如事务T1
 对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发
 现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。

MySQL数据库为我们提供的四种隔离级别：
  （1）Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。
  （2）Repeatable read (可重复读，MySQL模式的级别)：可避免脏读、不可重复读的发生。
  （3） Read committed (读已提交)：可避免脏读的发生。
  （4）Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
分布式系统的CAP理论:CAP指的是一致性、可用性以及分区容错性，这个理论是说在分布式存储系统中，最多只能实现上面的两点。
传统的单机数据库的选择就是CA，舍弃了P。而由于当前的网络硬件肯定会出现延迟丢包等问题。因此，在分布式数据库中，分区容忍性是我们必须需要实现的。
我们只能在一致性和可用性之间进行权衡，
没有NoSQL系统能同时保证这三点，这个理论是noSQL数据库的基石。
BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。
BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结， 是基于CAP定理逐步演化而来的。
BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。接下来看一下BASE中的三要素：
1、基本可用
  基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性----注意，这绝不等价于系统不可用。比如：
（1）响应时间上的损失。正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒
（2）系统功能上的损失：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，
           由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面
2、软状态
  软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时
3、最终一致性
    最终一致性强调的是所有的数据副本，在经过一段时间的同步之后，最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。
总的来说，BASE理论面向的是大型高可用可扩展的分布式系统，和传统的事物ACID特性是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，
并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，
ACID特性和BASE理论往往又会结合在一起。