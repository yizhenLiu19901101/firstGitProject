关于解耦：就是程序积木化，各个积木可以组合在一起形成一个形状，又可以拆分和替换，因为基本上各个积木都是独立的，只要它们之间的形状（接口）匹配，
就可以灵活地组装在一起，解耦就是逐渐达到那种理想状态。

设计模式原则：
    1、单一职责：
    2、显式替换：子类可以扩展父类的功能，但不能改变父类原有的功能
    3、依赖倒置：程序要依赖于抽象接口，不要依赖于具体实现 
    4、接口隔离原则：建立单一接口；尽量细化接口；接口方法要尽量少
    5、迪米特法则：也叫最少知道法则，它的典型应用时中介模式和门面模式
    6、开闭原则：软件需求变化时，尽量通过跨站软件实体的行为实现变化，而不是修改已有代码,即：对修改关闭，对扩展开放

总体来说设计模式分为三大类：
    创建型模式(创建型模式，就是【创建对象】的模式，抽象了实例化的过程。它帮助一个系统独立于如何创建、
           组合和表示它的那些对象。关注的是对象的创建，创建型模式将创建对象的过程进行了抽象，
           也可以理解为将创建对象的过程进行了封装，作为客户程序仅仅需要去使用对象，而不再关心创建对象过程中的逻辑),共五种：
           
           工厂方法模式(涉及角色有五种，分别是抽象产品角色(只有一个)，具体产品角色，抽象工厂角色，具体工厂角色，客户角色)、
           
           抽象工厂模式(抽象工厂模式有多个抽象产品角色，使用更广泛)、
           
           单例模式（涉及角色有产品角色和客户角色）、
           
           建造者模式(涉及的角色有抽象建造者角色，具体建造者角色，导演角色，产品角色以及客户角色)、
           
           原型模式(涉及角色有抽象产品角色（实现Cloneable接口），具体产品角色，客户角色)。
    结构型模式(结构型模式是为解决怎样【组装现有的类】，设计他们的交互方式，从而达到实现一定的功能的目的。结构型模式包含了对很多问题的解决)，
    共七种：       
           适配器模式（对象适配（涉及的角色有目标，适配源，适配器，客户，通过继承实现）、类适配（涉及的角色有适配源角色，适配器角色，客户角色，
           通过委派实现))、
           
           装饰器模式(Wrapper模式，继承的替代方法，涉及的角色有5种，抽象构建角色，具体构建角色，抽象装饰角色，具体装饰角色以及
           客户角色,还有一个半透明的装饰器模式)、
           
           代理模式(动/静态代理，代理类对目标对象进行额外的处理，涉及的角色有三种，目标角色，代理角色，客户角色)、
           
           外观模式（也叫门面模式，涉及三个角色，子系统角色，门面角色和客户角色）、
           
           桥接模式（涉及的角色有抽象桥接角色，具体桥接角色，抽象实体类角色，具体实体类角色，客户角色）、
           
           组合模式(将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和使用具有一致性,涉及抽象组件角色，具体组件角色，
           客户角色)、
           
           享元模式(涉及的角色有抽象享元角色，具体享元角色，享元工厂角色)。
    行为型模式（行为型模式涉及到算法和对象间职责的分配，行为模式【描述了对象和类的模式，以及它们之间的通信模式】，行为型模式刻划了在程序运行时难以
    跟踪的复杂的控制流可分为行为类模式(行为模式使用继承机制在类间分派行为(模板方法模式))和行为对象模式(行为对象模式使用对象聚合来分配行为(一些行
    为对象模式描述了一组对等的对象怎样相互协作以完成其中任何一个对象都无法单独完成的任务,比如策略模式，观察者模式))
           共十一种:
           策略模式(涉及角色有环境角色，抽象策略角色，具体策略角色，客户角色)、
           
           模板方法模式（涉及抽象角色、具体角色和客户角色，使用最多)、
           
           观察者模式(发布/订阅模式，涉及的角色有抽象主题角色、具体主题角色、抽象观察者角色、具体观察角色、客户)、
           
           迭代子模式（又叫游标模式，分为白箱聚集(包括抽象迭代子角色、具体迭代子角色，聚集角色，具体聚集角色，客户角色)和黑箱聚
           集(包括抽象迭代子角色、，聚集角色，具体聚集角色（具体迭代子角色为其内部类),客户角色))、
           
           命令模式(涉及的角色有抽象命令角色，具体命令角色，接受者角色，调用者角色,客户角色)、
       
           状态模式（也叫状态对象模式，允许一个对象在其内部状态改变的时候改变其行为,这个对象看上去就像是改变了它的类一样,涉及的角色有
           环境角色、抽象状态角色、具体状态角色）、
           
           访问者模式(涉及的角色包括抽象访问者角色、访问者角色、抽象元素角色、元素角色、客户角色，适合代码重构的场景)、
           
           中介者模式(涉及的角色包括中介者角色，具体中介者角色，抽象同事角色，具体同事角色)、
           -------------------------------------------------------------------------------------------------------         
           备忘录模式（适合记录历史属性的情形，涉及的角色有发起人、备忘录和管理者）、
           
           责任链模式（工作流用得应该比较多，不通用）、
           
           解释器模式(类似于编译原理中的内容，特定场景使用，涉及的角色有环境角色、抽象表达式角色、终结表达式角色、非终结表达式角色)。