Spring的特点：（1）DI/IOC（依赖注入/控制反转,获得依赖对象的过程由自身管理变为了由IOC容器主动注入,实现解耦，这是反射的运用）；（2）AOP(面向切面编程，这是反射和动态代理的使用，
只关心业务逻辑，将非业务逻辑提取出来);
低耦合的好处：（1）可维护性高，各个对象之间没有关系，便于单独测试、单独调试和诊断故障；（2）提高团队开发效率和产品质量，不同团队的成员只需要关注自己的逻辑，可单独测试，
不需要关心别人的逻辑，只需共同遵守接口标准；（3）提高了模块的可复用性，可以使用遵循同一个接口的其他对象来；（4）具备热拔插性，通过修改配置文件就可以实现子类的替换。
AOP的作用：提高了代码的复用性
在TransactionDefinition接口中定义了五个不同的事务隔离级别
  （1）ISOLATION_DEFAULT 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.另外四个与JDBC的隔离级别相对应 
  （2）ISOLATION_READ_UNCOMMITTED 这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读
  （3）ISOLATION_READ_COMMITTED 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。
 （4）ISOLATION_REPEATABLE_READ 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。
 （5）ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。
在TransactionDefinition接口中定义了七个事务传播行为。
    （1）PROPAGATION_REQUIRED 如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。
    （2）PROPAGATION_SUPPORTS 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行。但是对于事务同步的事务管理器，PROPAGATION_SUPPORTS与不使用事务有少许不同。
    （3）PROPAGATION_MANDATORY 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。
    （4）PROPAGATION_REQUIRES_NEW 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。
   （5）PROPAGATION_NOT_SUPPORTED 总是非事务地执行，并挂起任何存在的事务。
   （6）PROPAGATION_NEVER 总是非事务地执行，如果存在一个活动事务，则抛出异常
   （7）PROPAGATION_NESTED如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按TransactionDefinition.PROPAGATION_REQUIRED 属性执行